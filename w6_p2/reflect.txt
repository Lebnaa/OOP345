/*									Workshop 6 Part 2
	Lebna Noori
	Sections: NAA
	Student ID: 157672205
	Seneca Email: lnoori1@myseneca.ca
	Date: Sept. 14/2023

I have done all the coding by myself and only copied the code that
my professor provided to complete my workshops and assignments.
*/



Reflections : 
- We need to deallocate the dynamically allocated memory in your vector of resources in order to prevent memory leaks, because the more memory the vector elements use without releasing it back it can slow the down the runtinme of our application and can cause crashes. It can also cause resource leaks specailly in this workshop, because when dealing with file and other things we can run out of avaliable resource. Not deallocating memory can make our program very hard debug because the problems or error dont pop-up immediately which makes ir hard to debug. When working with files, proper clean-up is important in order to avoid can cause problems. Specifically in this workshop we had to dealocate the memory because we manage it, class Directory manages the resources inside its vector, which means they're in composition relationship.


- We had to cast the Resource pointer to a Directory pointer in order to use its member function find(). for example in the find() function of Directory if the RECURSIVE flag is passed and checked a certain directory,
I had to call its find() as well, so I have to cast it to a Directory before doing so:

result = dynamic_cast<Directory*>(m_contents[i])->find(name, flags);

- std::vector<sdds Resource*> (using pointers):
Storing pointers to resources you can have a collection of resources of different derived types. Pointers give you control over the lifetime of the resources, which means we're in composition relation. You can allocate and deallocate resources dynamically, and have control over where resources are created and destroyed could be at different times. But, using pointers we need to manage memory for the objects pointed to by the pointers and includes memory allocation and deallocation. If a resource is destroyed while its pointer is still in use, you can end up with invalid pointers, can cause errors 

- std::vector<sdds::Resource> (using objects):
Storing objects directly makes memory management much easier. Resources are created and destroyed automatically when they go in and out of scope, so no memory leaks. We're not composition relation anymore so we don't need to worry about the lifetime of objects or managing memory. 
But, If out resources have different derived classes, we won't be able to store them in the same container without resorting to some kind of type destruction. Storing objects directly can involve more copying or moving operations, depending on how we manage the collection. 


